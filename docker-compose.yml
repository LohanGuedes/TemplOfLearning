version: "3.7"

services:
  tol_app1: &tol1
    networks:
      - tol_network
    depends_on:
      db:
        condition: service_healthy
    image: to_app
    build:
      context: ./
    hostname: tol_instance1
    # environment:
    expose:
      - "8081:8080"
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: "200MB"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c $(curl --location https://taskfile.dev/install.sh)",
        ]
      interval: 10s
      timeout: 3s
      retries: 3

  tol_app2:
    networks:
      - tol_network
    <<: *tol1 # Get previous config from first instance
    hostname: tol_instance2
    ports:
      - "8082:8080"
    # environment:

  nginx:
    image: nginx:latest
    networks:
      - tol_network
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      tol_app1:
        condition: service_healthy
      tol_app2:
        condition: service_healthy
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: "0.17"
          memory: "10MB"

  db:
    networks:
      - tol_network
    image: postgres:latest
    hostname: db
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    expose:
      - "${DB_PORT}:5432"
    volumes:
      - psql_volume:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: "0.13"
          memory: "140MB"
    healthcheck:
      test:
        ["CMD-SHELL", "sh -c 'pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}'"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  psql_volume:

networks:
  tol_network:
    driver: bridge
